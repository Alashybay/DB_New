REDIS:

Easy:
    import redis
    import time

    # Connect to Redis
    r = redis.Redis(host='localhost', port=6379, db=0)

    iterations = 30
    execution_times = []

    for i in range(iterations):
        start = time.time()
        # Retrieve all books
        book_keys = r.keys('book:*')

        for key in book_keys:
            book = r.hgetall(key)
            print(book)

        end = time.time()
        exectition_time = end - start
        execution_times.append(exectition_time)

    with open('runtime240k_q1.txt', 'w') as file:
        for i, time in enumerate(execution_times, 1):
            file.write(f'{i}. {time:.4f} sec\n')

    # Close the Redis connection
    r.close()


Intermediate: 
    import redis
    import time

    # Connect to Redis
    r = redis.Redis(host='localhost', port=6379, db=0)

    # Define the number of iterations
    num_iterations = 30

    # Execute the query multiple times and record execution times
    execution_times = []
    for _ in range(num_iterations):
        start_time = time.time()

        # Query: Retrieve books based on publication_date pattern
        book_keys = r.keys('book:*')
        for key in book_keys:
            book_data = r.hgetall(key)
            if book_data:
                publication_date = book_data.get(b'publication_date', b'').decode()
                if publication_date.startswith('2021'):
                    title = book_data.get(b'title', b'').decode()
                    author = book_data.get(b'author', b'').decode()

        end_time = time.time()
        execution_time = end_time - start_time
        execution_times.append(execution_time)

    # Save execution times in a text file
    with open('redis_query_execution_times.txt', 'w') as file:
        for i, time in enumerate(execution_times, 1):
            file.write(f'{i}. {time:.4f} sec\n')

    # Close the Redis connection
    r.close()


Complex:
    import redis

    # Connect to Redis
    r = redis.Redis(host='localhost', port=6379, db=0)

    # Retrieve borrowing history IDs with filtering
    borrowing_keys = r.keys("borrowing_history:*")
    #print(borrowing_keys)
    
    for key in borrowing_keys:
        borrowing = r.hgetall(key)
        borrow_date = borrowing[b'borrow_date'].decode('utf-8')

        # Filter by borrow_date
        if borrow_date.startswith('2023'):
            borrowing_id = key.decode('utf-8').split(':')[1]
            book_key = "book:" + borrowing_id
            borrower_key = "borrower:" + borrowing_id

            # Retrieve book and borrower data
            book = r.hgetall(book_key)
            borrower = r.hgetall(borrower_key)

            # Print the result
            result = {
                'title': book[b'title'].decode('utf-8'),
                'author': book[b'author'].decode('utf-8'),
                'name': borrower[b'name'].decode('utf-8')
            }
            print(result)

Advanced: